@page "/"
@using AwesomeBlazor.Components.Movies
@using Services.Models.Trending
@using AwesomeBlazor.Components.Charts
@inject Services.Abstractions.ITMDbService TMDb

<Heading Size="HeadingSize.Is1" Margin="Margin.Is3.FromBottom">Blazorise</Heading>

<Row>
    <Column ColumnSize="ColumnSize.IsThird">
        <AwChartVoteAverange Data="PagedMovies.Results"></AwChartVoteAverange>
    </Column>
    <Column ColumnSize="ColumnSize.IsThird">
        <AwChartPopularity Data="PagedMovies.Results"></AwChartPopularity>
    </Column>
    <Column ColumnSize="ColumnSize.IsThird">
        <AwChartVoteCount Data="PagedMovies.Results"></AwChartVoteCount>
    </Column>
</Row>

<Divider></Divider>
<Row>
    <Column ColumnSize="ColumnSize.IsThird.WithOffset.OnDesktop.IsThird.OnDesktop.IsThird.WithOffset.OnFullHD.IsThird.OnFullHD">
        <AwMovieSlider Movies="PagedMovies.Results"></AwMovieSlider>
    </Column>
</Row>

@code {

    public PagedResult<Movie> PagedMovies { get; set; } = new PagedResult<Movie>();

    protected override async Task OnInitializedAsync()
    {
        await LoadMoviesAsync();
    }

    private async Task LoadMoviesAsync(int page = 1)
    {
        var trending = new TrendingFilter()
        {
            Type = "all",
            TimeWindow = "day"
        };
        PagedMovies = await TMDb.GetTrandingAsync(trending, page);
        PagedMovies.Results = PagedMovies.Results.Take(5).ToList();
    }
}
