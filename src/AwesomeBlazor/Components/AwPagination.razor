@if (Page.HasValue)
{
    <Pagination>
        @if (ShowPrevButton)
        {
            <PaginationItem @onclick="() => SelectPage(Page.Value - 1)">
                <PaginationLink>
                    <span aria-hidden="true">«</span>
                </PaginationLink>
            </PaginationItem>
        }
        @for (int i = 0; i < Pages.Length; i++)
        {
            <PaginationItem @onclick="() => SelectPage(Pages[i])">
                <PaginationLink>
                    @Pages[i]
                </PaginationLink>
            </PaginationItem>
        }
        @if (ShowNextButton)
        {
            <PaginationItem @onclick="() => SelectPage(Page.Value + 1)">
                <PaginationLink>
                    <span aria-hidden="true">»</span>
                </PaginationLink>
            </PaginationItem>
        }
    </Pagination>
}

@code {
    [Parameter]
    public EventCallback<int> OnPage { get; set; }

    [Parameter]
    public int? Page { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public int TotalResults { get; set; }

    public int[] Pages { get; set; } = Array.Empty<int>();
    public bool ShowPrevButton => (Page != 1);
    public bool ShowNextButton => (Page != TotalPages);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (Page.HasValue && !firstRender)
        {
            if (Page.Value > 3)
            {
                Pages = new [] { Page.Value - 1, Page.Value, Page.Value + 1 };
            }
            else
            {
                Pages = new [] { 1, 2, 3 };
            }
            StateHasChanged();
        }
    }

    void SelectPage(int page)
    {
        OnPage.InvokeAsync(page);
    }
}