@page "/"
@using AwesomeBlazor.Components.Movies
@using Services.Models.Trending
@using AwesomeBlazor.Components.Charts
@inject Services.Abstractions.ITMDbService TMDb

<Heading Size="HeadingSize.Is6" Margin="Margin.Is3.FromBottom">Movies</Heading>

<Row>
    <Column ColumnSize="ColumnSize.IsThird">
        <AwChartVoteAverange Data="PagedMovies.Results"></AwChartVoteAverange>
    </Column>
    <Column ColumnSize="ColumnSize.IsThird">
        <AwChartPopularity Data="PagedMovies.Results"></AwChartPopularity>
    </Column>
    <Column ColumnSize="ColumnSize.IsThird">
        <AwChartVoteCount Data="PagedMovies.Results"></AwChartVoteCount>
    </Column>
</Row>

<Divider></Divider>
<Row>
    <Column ColumnSize="ColumnSize.IsThird.OnDesktop.IsThird.OnFullHD">
        <AwMovieSlider Movies="PagedMovies.Results" OnMovieClick="GetMovie"></AwMovieSlider>
    </Column>
    <Column ColumnSize="ColumnSize.Is8.OnDesktop.Is8.OnFullHD">
        <AwMovieDetail Movie="SelectedMovie"></AwMovieDetail>
    </Column>
</Row>

@code {
    public long currentMovieId = 0;
    public PagedResult<Movie> PagedMovies { get; set; } = new PagedResult<Movie>();
    public Movie SelectedMovie { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadMoviesAsync();
    }

    private async Task LoadMoviesAsync(int page = 1)
    {
        PagedMovies = await TMDb.GetOrderByVoteCountAsync(page);
        PagedMovies.Results = PagedMovies.Results.Take(5).ToList();
    }

    public async Task GetMovie(long movieId)
    {
        if (movieId > 0)
            SelectedMovie = await TMDb.GetMovieAsync(movieId);
    }
}
