@if (Page.HasValue)
{
<Pagination>
    @if (ShowPrevButton)
    {
        <PaginationItem @onclick="() => SelectPage(Page.Value - 1)">
            <PaginationLink>
                <span aria-hidden="true">«</span>
            </PaginationLink>
        </PaginationItem>
    }
    @for (int i = 0; i < Pages.Length; i++)
    {
        var item = Pages[i];
        <PaginationItem Active="@(Page.Value == item)">
            <PaginationLink Clicked="() => SelectPage(item)">
                @item
            </PaginationLink>
        </PaginationItem>
    }
    @if (ShowNextButton)
    {
        <PaginationItem @onclick="() => SelectPage(Page.Value + 1)">
            <PaginationLink>
                <span aria-hidden="true">»</span>
            </PaginationLink>
        </PaginationItem>
    }
</Pagination>
}

@code {
    [Parameter]
    public EventCallback<int> OnPage { get; set; } = new EventCallback<int>();

    [Parameter]
    public int? Page { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public int TotalResults { get; set; }

    public int[] Pages { get; set; } = Array.Empty<int>();
    public bool ShowPrevButton => (Page != 1);
    public bool ShowNextButton => (Page != TotalPages);

    protected override void OnParametersSet()
    {
        if (Page.HasValue)
        {
            if (Page.Value > 3)
            {
                Pages = new[] { Page.Value - 2, Page.Value - 1, Page.Value, Page.Value + 1, Page.Value + 2 };
            }
            else
            {
                Pages = new[] { 1, 2, 3, 4, 5 };
            }
        }
    }

    void SelectPage(int page)
    {
        OnPage.InvokeAsync(page);
    }
}