@using AwesomeBlazor.Models.Users

<Validation>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">First Name</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit @bind-Text="@CurrentUser.FirstName" Placeholder="First name">
                <ValidationError />
            </TextEdit>
        </FieldBody>
    </Field>
</Validation>
<Validation>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Last Name</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit @bind-Text="@CurrentUser.LastName" Placeholder="Last name">
                <ValidationError />
            </TextEdit>
        </FieldBody>
    </Field>
</Validation>
<Validation>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Email</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit @bind-Text="@CurrentUser.Email" Placeholder="Email">
                <FieldHelp>Please enter a valid email address</FieldHelp>
                <ValidationError />
            </TextEdit>
        </FieldBody>
    </Field>
</Validation>
<Validation>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Birthday</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <DateEdit TValue="DateTime?" @bind-Date="@CurrentUser.BirthDate" Placeholder="Enter birthday">
                <Feedback>
                    <ValidationError />
                    @*<ValidationNone>Please enter the email.</ValidationNone>
                        <ValidationSuccess>Email is good.</ValidationSuccess>
                        <ValidationError>Enter valid email!</ValidationError>*@
                </Feedback>
            </DateEdit>
        </FieldBody>
    </Field>
</Validation>

@code {
    private UserInsertModel currentUser = new UserInsertModel();
    [Parameter] public UserInsertModel CurrentUser
    {
        get => currentUser;
        set
        {
            currentUser = value;
            CurrentUserChanged.InvokeAsync(value).GetAwaiter().GetResult();
        }
    }

    [Parameter] public EventCallback<UserInsertModel> CurrentUserChanged { get; set; }
}
