@using AwesomeBlazor.Languages
@inject Microsoft.Extensions.Localization.IStringLocalizer<AwesomeLanguages> Loc

<Column ColumnSize="ColumnSize.IsThird.OnDesktop.IsQuarter.OnFullHD.IsFull.OnMobile.IsHalf.OnTablet">
    <Card Margin="Margin.Is2.FromBottom">
        <CardImage Source="@Movie.PosterUrl" Alt="@Movie.OriginalTitle" @onclick="() => MovieDetails()"></CardImage>
        <CardBody>
            <CardTitle Size="5" Weight="TextWeight.Bold">@Movie.Title</CardTitle>
            <Row>
                <Column ColumnSize="ColumnSize.IsHalf">
                    <Badge Color="@GetAverageBadgeColor()">@(Movie.VoteAverage * 10) %</Badge>
                    <Badge Color="Color.Secondary">@Movie.VoteCount @Loc["Votes"]</Badge>
                </Column>
                <Column ColumnSize="ColumnSize.IsHalf">
                    @foreach (var g in Movie.GenreIds)
                    {
                        <Badge Color="Color.Light" Display="Display.Inline">@g</Badge>
                    }
                </Column>
            </Row>
        </CardBody>
        <CardFooter>
            <Text Alignment="TextAlignment.Right">
                📅 @Movie.ReleaseDate.ToString("MMMM, yyyy", languageService.GetCultureInfo())
            </Text>
        </CardFooter>
    </Card>
</Column>

@code {
    [Parameter]
    public Movie Movie { get; set; }
    [Inject]
    ILanguageService languageService { get; set; }

    public EventCallback<long> OnDetailClick { get; set; }

    void MovieDetails()
    {
        if (OnDetailClick.HasDelegate)
            OnDetailClick.InvokeAsync(Movie.Id);
    }

    Color GetAverageBadgeColor()
    {
        switch (Movie.VoteAverage)
        {
            case var n when (n < 5 && n >= 0):
                return Color.Danger;
            case var n when (n >= 5 && n < 7):
                return Color.Warning;
            case var n when (n >= 7):
                return Color.Success;
            default:
                return Color.Info;
        }
    }
}
